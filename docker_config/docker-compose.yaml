services:
  app:
    container_name: web_app
    restart: unless-stopped
    image: codewithteddy_web_app
    build:
      context: .
      dockerfile: ./docker_config/Dockerfile.app
    expose:
      - 8000
    env_file:
      - .env
    environment:
      - PROXY=1
      - DB_CREATE_TABLES=0
    secrets:
      - db_connection_string
      - jwt_secret
      - session_secret
    volumes:
      - ./app/web/html/static:/code/app/web/html/static
    depends_on:
      db:
        condition: service_healthy
    profiles:
      - dev
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://web_app:8000"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3

  migration:
    container_name: migration_app
    restart: "no"
    image: codewithteddy_web_app
    build:
      context: .
      dockerfile: ./docker_config/Dockerfile.app
    env_file:
      - .env
    environment:
      - DB_CREATE_TABLES=0
    secrets:
      - db_connection_string
      - jwt_secret
      - session_secret
    volumes:
      - ./scripts:/code/scripts
      - ./migrations:/code/migrations
    depends_on:
      db:
        condition: service_healthy
    command: python -m scripts.alembic upgrade
    profiles:
      - dev
      - prod

  db: # Postgres
    image: postgres:16.2
    container_name: db
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    profiles:
      - dev
      - prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      start_period: 5s
      interval: 10s
      timeout: 5s
      retries: 3

  nginx-dev:
    build:
      context: .
      dockerfile: ./docker_config/Dockerfile.nginx
      args:
        - NGINX_FILE=./nginx/nginx-dev.conf
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./app/web/html/static:/static
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    profiles:
      - dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      start_period: 10s
      interval: 15s
      timeout: 5s
      retries: 3

  nginx:
    build:
      context: .
      dockerfile: ./docker_config/Dockerfile.nginx
      args:
        - NGINX_FILE=./nginx/nginx.conf
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./app/web/html/static:/code/app/web/html/static
      - ./certs/codewithteddy.dev/domain.cert.pem:/etc/ssl/codewithteddy.dev/domain.cert.pem
      - ./certs/codewithteddy.dev/private.key.pem:/etc/ssl/codewithteddy.dev/private.key.pem
      - ./certs/codewithteddy.dev/intermediate.cert.pem:/etc/ssl/codewithteddy.dev/intermediate.cert.pem
      - ./certs/codewithteddy.com/domain.cert.pem:/etc/ssl/codewithteddy.com/domain.cert.pem
      - ./certs/codewithteddy.com/private.key.pem:/etc/ssl/codewithteddy.com/private.key.pem
      - ./certs/codewithteddy.com/intermediate.cert.pem:/etc/ssl/codewithteddy.com/intermediate.cert.pem
      - ./certs/dhparam.pem 2048:/etc/ssl/certs/dhparam.pem 2048
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    profiles:
      - prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      start_period: 10s
      interval: 15s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:

secrets:
  db_password:
    file: ./secrets/db_password
  db_connection_string:
    file: ./secrets/db_connection_string
  jwt_secret:
    file: ./secrets/jwt_secret
  session_secret:
    file: ./secrets/session_secret
